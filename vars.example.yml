---
# lines ending in a comment with an asterisk indicate values that you really need to set
# once the values are set, rename or copy this to vars.yml

generate_ssh_key: true
add_ssh_key_to_github: true
generate_gpg_key: true
add_gpg_key_to_github: true
install_keychain: true
set_gpg_agent_config: true
set_git_global_config: true
install_nvm_node: true
install_avn: true
install_rbenv_ruby: true
install_php: true               #make sure to set the desired version(s) of PHP to install below
install_composer: true
make_install_imagemagick: true
install_python: true            #make sure to set the desired version(s) of Python to install below

# the playbook will create an ed25519 key rather than an RSA or DSA key
# the default name for the key would be id_ed25519
# you can change this if for whatever reason you prefer to name your key differently...
ssh_key_filename: id_ed25519

# the github key name is set to facts that identify the key with the machine and WSL distribution
# this can easily allow you to identify the key in question and distinguish it from other keys you might have on Github
# these parameters will be used both for SSH keys and GPG keys
# make sure to generate an API token with admin:gpg_key, admin:public_key, admin:ssh_signing_key read / write capabilities
# see Github -> Settings -> Developer Settings -> Personal access tokens -> Tokens (classic) and generate a new token if you donâ€™t already have one
github_key_name: "{{ansible_facts['nodename']}} {{ansible_facts['distribution']}} {{ansible_facts['distribution_major_version']}}"
github_email: myemail@exmaple.com   #*
github_api_token: my_api_token      #*

# if GPG is used to sign commits, it makes sense for the key to be associated with the Github email address
# however you might have reason to want to set it specifically...
# Here you can also set the TTL for the GPG agent cache, seeing the default is 600 seconds = 10 minutes which can get frustrating
gpg_realname: "your name here"      #*
gpg_useremail: "{{ github_email }}"
gpg_default_cache_ttl: 14400
gpg_max_cache_ttl: 14400
gpg_default_cache_ttl_ssh: 14400
gpg_max_cache_ttl_ssh: 14400

# git global configuration
git_user_name: "{{ gpg_realname }}"
git_user_email: "{{ github_email }}"
git_default_init_branch: "main"
git_commit_gpgsign: true

# setting this to true and defining ip and user will
# copy the newly generated ssh key to a remote server
# so that you will be easily able to SSH into the remote server
# from the WSL instance, without supplying a password every time
remote_server_authorize_key: false  #*
remote_server_ip: "server_ip_here"   #* when remote_server_authorize_key is true
remote_server_user: remoteserveruser #* when remote_server_authorize_key is true

# this is the sudo password for the current user on the local WSL,
# useful for updating apt cache and apt installing packages
ansible_become_password: sudopasswordhere #*

php_versions: # list here the versions of php you would like installed
  - "8.3"
  - "8.2"

# uncomment the modules you would like to install
# (only those available for the latest PHP 8.3 are listed here)
php_modules:
#  - amqp
#  - apcu
#  - ast
#  - bcmath
#  - bz2
#  - cgi
#  - cli        #* recommended for running PHP on the command line
#  - common
#  - curl       #* needed for Composer!
#  - dba
#  - decimal
#  - dev        #* needed for PECL installs
#  - ds
#  - enchant
#  - fpm        #* needed for Apache or Nginx PHP-FPM
#  - gd
#  - gearman
#  - gmagick
#  - gmp
#  - gnupg
#  - grpc
#  - http
#  - igbinary
#  - imagick    #* useful for image manipulation, for example in wordpress sites... requires imagemagick to be installed
#  - imap       # not available for PHP 8.4, moved to PECL
#  - inotify
#  - interbase
#  - intl
#  - ldap
#  - mailparse
#  - maxminddb
#  - mbstring
#  - memcache
#  - memcached
#  - mongodb
#  - msgpack
#  - mysql
#  - oauth
#  - odbc
#  - opcache
#  - pcov
#  - pgsql
#  - phpdbg
#  - protobuf
#  - ps
#  - pspell     # not available for PHP 8.4, moved to PECL
#  - psr
#  - raphf
#  - rdkafka
#  - readline
#  - redis
#  - rrd
#  - smbclient
#  - snmp
#  - soap
#  - solr       # not available (yet?) for PHP 8.4
#  - sqlite3
#  - ssh2
#  - stomp
#  - swoole
#  - sybase
#  - tidy
#  - uopz
#  - uploadprogress
#  - uuid
#  - vips
#  - xdebug
#  - xhprof
#  - xml
#  - xmlrpc
#  - xsl
#  - yac
#  - yaml
#  - zip
#  - zmq
#  - zstd

# Supported Ubuntu and Python Versions
# - Ubuntu 20.04 (focal) Python3.5 - Python3.7, Python3.9 - Python3.13
# - Ubuntu 22.04 (jammy) Python3.7 - Python3.9, Python3.11 - Python3.13
# - Ubuntu 24.04 (noble) Python3.7 - Python3.11, Python3.13
# Note: Python 2.7 (focal, jammy), Python 3.8 (focal), Python 3.10 (jammy), Python3.12 (noble)
#  are not provided by deadsnakes as upstream ubuntu provides those packages
python_versions:
  - "3.11"
  - "3.12"
  - "3.13"

python_packages:
  - "venv"
  - "dev"

# might not want to touch this... is needed to correctly install and build ruby
__ruby_build_packages:
  - build-essential
  - zlib1g-dev
  - libssl-dev
  - libyaml-dev
  - libreadline6-dev
  - libncurses5-dev
  - libffi-dev
  - libgdbm-dev
  - libsqlite3-dev
