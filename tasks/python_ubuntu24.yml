---
- name: Make API request to Launchpad
  uri:
    url: "https://api.launchpad.net/devel/~deadsnakes/+archive/ubuntu/ppa"
    return_content: yes
    method: GET
    headers:
      Accept: "application/json"
  register: launchpad_deadsnakes_response

- name: Parse JSON to extract signing key fingerprint
  ansible.builtin.set_fact:
    deadsnakes_signing_key_fingerprint: "{{ launchpad_deadsnakes_response.json.signing_key_fingerprint }}"
  
- name: Display the signing key fingerprint
  ansible.builtin.debug:
    msg: "The signing key fingerprint is: {{ deadsnakes_signing_key_fingerprint }}"

- name: Retrieve ASCII representation of the key using the signing key fingerprint
  ansible.builtin.uri:
    url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x{{ deadsnakes_signing_key_fingerprint }}"
    return_content: true
  register: deadsnakes_signing_key_response

- name: Set fact with the response content
  ansible.builtin.set_fact:
    deadsnakes_signing_key_ascii: "{{ deadsnakes_signing_key_response.content }}"

- name: Install the PPA repository in deb822 format
  become: true
  ansible.builtin.deb822_repository:
    state: present
    name: "deadsnakes-ubuntu-ppa-{{ansible_distribution_release}}"
    types: [deb]
    uris: [https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu]
    suites: ["{{ ansible_facts['distribution_release'] }}"]
    components: [main]
    signed_by: "{{ deadsnakes_signing_key_ascii }}"

- name: Define list of Python versions to install
  set_fact:
    python_versions_to_install: "{{ python_versions | map('regex_replace', '^(.*)$', 'python\\1') | list }}"

- name: Define list of Python packages to install for each version
  set_fact:
    python_packages_to_install: "{{ python_packages_to_install|default([]) + (python_packages | map('regex_replace', '^(.*)$', item ~ '-\\1') | list) }}"
  with_items: "{{ python_versions_to_install }}"

- name: Report python_versions_to_install
  debug:
    msg:
      python_versions_to_install: "{{ python_versions_to_install }}"
      python_packages_to_install: "{{ python_packages_to_install }}"

- name: Install Python
  apt:
    name: "{{ python_versions_to_install }}"
    state: present
  become: true

- name: Install Python packages
  apt:
    name: "{{ python_packages_to_install }}"
    state: present
  become: true
  diff: true

- name: Check if Python is installed correctly
  shell: python{{ ( python_versions | max )|quote }} -c "import sys; print(str(sys.version_info[0])+'.'+str(sys.version_info[1]))"
  args:
    executable: /bin/bash
  register: python_installation_check
  changed_when: false

- name: Report whether Python is installed correctly
  when: python_installation_check.rc == 0
  assert:
    that:
      - "python_installation_check.stdout == ( python_versions | max )"
    fail_msg: "We expected the max version of Python to be {{ python_versions | max }} but instead it was {{ python_installation_check.stdout }}"
    success_msg: "Max version of Python is in fact the expected version: {{ python_installation_check.stdout }}"
