---
- name: Make API request to Launchpad
  uri:
    url: "https://api.launchpad.net/devel/~ondrej/+archive/ubuntu/php"
    return_content: yes
    method: GET
    headers:
      Accept: "application/json"
  register: launchpad_ondrej_response

- name: Parse JSON to extract signing key fingerprint
  ansible.builtin.set_fact:
    ondrej_signing_key_fingerprint: "{{ launchpad_ondrej_response.json.signing_key_fingerprint }}"

- name: Display the signing key fingerprint
  ansible.builtin.debug:
    msg: "The signing key fingerprint is: {{ ondrej_signing_key_fingerprint }}"

- name: Retrieve ASCII representation of the key using the signing key fingerprint
  ansible.builtin.uri:
    url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x{{ ondrej_signing_key_fingerprint }}"
    return_content: true
  register: ondrej_signing_key_response

- name: Set fact with the response content
  ansible.builtin.set_fact:
    ondrej_signing_key_ascii: "{{ ondrej_signing_key_response.content }}"

- name: Install the PPA repository in deb822 format
  become: true
  ansible.builtin.deb822_repository:
    state: present
    name: "ondrej-ubuntu-php-{{ansible_distribution_release}}"
    types: [deb]
    uris: [https://ppa.launchpadcontent.net/ondrej/php/ubuntu]
    suites: ["{{ ansible_facts['distribution_release'] }}"]
    components: [main]
    signed_by: "{{ ondrej_signing_key_ascii }}"

- name: Define list of PHP versions to install
  set_fact:
    php_versions_to_install: "{{ php_versions | map('regex_replace', '^(.*)$', 'php\\1') | list }}"

- name: Define list of PHP modules to install for each version
  set_fact:
    php_modules_to_install: "{{ php_modules_to_install|default([]) + (php_modules | map('regex_replace', '^(.*)$', item ~ '-\\1') | list) }}"
  with_items: "{{ php_versions_to_install }}"

- name: Report php_versions_to_install
  debug:
    msg:
      php_versions_to_install: "{{ php_versions_to_install }}"
      php_modules_to_install: "{{ php_modules_to_install }}"

- name: Install PHP
  apt:
    name: "{{ php_versions_to_install }}"
    state: present
  become: true

- name: Install PHP modules
  apt:
    name: "{{ php_modules_to_install }}"
    state: present
  become: true
  diff: true

- name: Check if PHP is installed correctly
  shell: php -r 'echo PHP_MAJOR_VERSION . "." . PHP_MINOR_VERSION;'
  args:
    executable: /bin/bash
  register: php_installation_check
  changed_when: false

- name: Verify expected default PHP
  when: php_installation_check.rc == 0
  assert:
    that:
      - "php_installation_check.stdout == ( php_versions | max )"
    fail_msg: "We expected the default version of PHP to be {{ php_versions | max }} but instead it was {{ php_installation_check.stdout }}"
    success_msg: "Default version of PHP is in fact the expected version: {{ php_installation_check.stdout }}"
